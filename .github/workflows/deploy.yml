name: Deploy Python App to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    name: Build and Deploy Python App
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Opcional: se precisar configurar o Python para rodar testes ou builds locais
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Opcional: instalar dependências ou rodar testes
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Configura as credenciais AWS para que possamos acessar o ECR e o EKS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Faz login no ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Constrói a imagem Docker da aplicação Python
      - name: Build Docker image for Python App
        run: |
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ms-generatezipdownload-app:latest .

      # Publica a imagem no ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ms-generatezipdownload-app:latest

      # Atualiza o kubeconfig para conectar ao seu cluster EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Retrieve Secrets from AWS Secrets Manager and create Kubernetes secret
        run: |
          secret=$(aws secretsmanager get-secret-value --secret-name zipdownload-dbcredential-redis-db --region sa-east-1 --query SecretString --output text)
          # Parse o JSON dos segredos
          redis_host=$(echo $secret | jq -r '.redis_host')
          redis_port=$(echo $secret | jq -r '.redis_port')
          redis_password=$(echo $secret | jq -r '.redis_password')
          # Criar o secret no Kubernetes
          kubectl delete secret pagamento-dbcredentials || true  # Para evitar erro caso já exista
          kubectl create secret generic pagamento-dbcredentials \
            --from-literal=redis_host=$redis_host \
            --from-literal=redis_port=$redis_port \
            --from-literal=redis_password=$redis_password   
            
      # Faz o deploy da aplicação no EKS utilizando os manifests Kubernetes
      - name: Deploy Python App to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
